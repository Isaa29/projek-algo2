import csv
import os
from datetime import datetime, timedelta

file_film = "film.csv"
file_jadwal = "jadwal.csv"
file_studio = "studio.csv"
file_kursi = "kursi.csv"
file_rating = "rating.csv"
file_riwayat = "riwayat_pemesanan.csv"
file_pengguna = "akun_pengguna.csv"
file_admin = "akun_admin.csv"

def inisialisasi_file():
    if not os.path.exists(file_pengguna):
        with open(file_pengguna, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['username', 'password'])

    if not os.path.exists(file_admin):
        with open(file_admin, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['username', 'password'])

    if not os.path.exists(file_film):
        with open(file_film, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['id_film', 'Judul', 'Genre', 'Durasi (menit)', 'Harga'])

    if not os.path.exists(file_studio):
        with open(file_studio, mode='w', newline='' ) as file:
            writer = csv.writer(file)
            writer.writerow(['id_studio', 'nama_studio', 'kapasitas'])

    if not os.path.exists(file_rating):
        with open(file_rating, mode='w', newline='' ) as file:
            writer = csv.writer(file)
            writer.writerow(['id_film', 'rating', 'username'])



def clear_terminal():
    os.system('cls' if os.name == 'nt' else 'clear')

def header():
    print("""
 _____        ______               
|_   ()    |___  /               
  | |  _ __  __ / /  ___  _ __   ___ 
  | | | |\ \/ // /  / _ \| '_ \ / _ \\
  | | | | >  </ /| (_) | | | |  __/
  \/ ||//\\/\/|| ||\|
                                     
                                     
""")

def main():
    clear_terminal()
    header()

    print('===================================')
    print('PEMESANAN TIKET BIOSKOP TixZone'.center(40))
    print('===================================\n')
    print('1. Daftar')
    print('2. Login')
    print('3. Keluar\n')

    pilihan = input('Tentukan pilihan: ')
    if pilihan == '1':
        daftar()
    elif pilihan == '2':
        login()
    elif pilihan == '3':
        keluar()
    else:
        print('Pilihan tidak valid!\n')
        return main()

def daftar():
    clear_terminal()
    header()
    print('===================================')
    print('DAFTAR AKUN PENGGUNA'.center(35))
    print('===================================\n')

    username = input('Masukkan username: ').strip()
    if not username:
        ulang = input('Username tidak boleh kosong! Coba lagi? (y/n): ')
        if ulang.lower() == 'y':
            return daftar()
        else:
            return main()

    with open(file_pengguna, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            if row['username'] == username:
                print('Username sudah terdaftar. Coba yang lain.\n')
                return daftar()

    password = input('Masukkan password: ').strip()
    if not password:
        input('Password tidak boleh kosong! Tekan Enter untuk ulangi...')
        return daftar()

    konfirmasi = input('Konfirmasi password: ')
    if password != konfirmasi:
        print('Password tidak cocok. Ulangi lagi.\n')
        return daftar()

    with open(file_pengguna, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([username, password])

    input('Akun berhasil dibuat! Tekan Enter untuk kembali ke menu...')
    return main()

def login():
    clear_terminal()
    header()
    print('===================================')
    print('LOGIN'.center(35))
    print('===================================\n')
    print('1. Admin')
    print('2. Pengguna')
    print('3. Kembali')

    pilihan = input('Pilih jenis login: ')
    if pilihan == '1':
        return login_admin()
    elif pilihan == '2':
        return login_pengguna()
    elif pilihan == '3':
        return main()
    else:
        print('Pilihan tidak valid!\n')
        return login()

def login_admin():
    clear_terminal()
    header()
    print('\n== LOGIN ADMIN ==')

    while True:
        username = input('Username: ').strip()
        if not username:
            pilihan = input('Username tidak ditemukan. Mau kembali ke menu utama? (y/n): ').lower()
            if pilihan == 'y':
                return login()
            else:
                continue

        password = input('Password: ').strip()
        if not password:
            pilihan = input('Password salah. Mau kembali ke menu utama? (y/n): ').lower()
            if pilihan == 'y':
                return login()
            else:
                continue

        with open(file_admin, mode='r', newline='') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['username'] == username and row['password'] == password:
                    print(f'\nSelamat datang, Admin {username}!\n')
                    menu_admin()
                    return

        print('Login gagal. Coba lagi.\n')

def login_pengguna():
    clear_terminal()
    header()
    print('\n== LOGIN PENGGUNA ==')

    while True:
        username = input('Username: ').strip()
        if not username:
            pilihan = input('Username tidak ditemukan. Mau kembali ke menu utama? (y/n): ').lower()
            if pilihan == 'y':
                return login()
            else:
                continue

        password = input('Password: ').strip()
        if not password:
            pilihan = input('Password salah. Mau kembali ke menu utama? (y/n): ').lower()
            if pilihan == 'y':
                return login()
            else:
                continue

        with open(file_pengguna, mode='r', newline='') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['username'] == username and row['password'] == password:
                    print(f'\nSelamat datang, {username}!\n')
                    menu_pengguna(username)
                    return

        print('Login gagal. Coba lagi.\n')

def keluar():
    clear_terminal()
    header()
    print('Terima kasih telah menggunakan TixZone!')

def menu_admin():
    clear_terminal()
    header()
    while True:
        print('\n=== MENU ADMIN ===')
        print('1. Manajemen Film')
        print('2. Manajemen Jadwal Tayang')
        print('3. Manajemen Studio')
        print('4. Lihat Riwayat Transaksi')
        print('5. Logout')

        pilihan = input('Pilih menu: ')
        if pilihan == '1':
            manajemen_film()
        elif pilihan == '2':
            manajemen_jadwal()
        elif pilihan == '3':
            manajemen_studio()
        elif pilihan == '4':
            riwayat_transaksi()
        elif pilihan == '5':
            return main()
        else:
            print('Pilihan tidak valid!\n')

def manajemen_film():
    clear_terminal()
    header()
    while True:
        print('\n=== MANAJEMEN FILM ===')
        print('1. Tambah Film')
        print('2. Hapus Film')
        print('3. Edit Data Film')
        print('4. Kembali')

        pilihan = input('Pilih menu: ')
        if pilihan == '1':
            tambah_film()
        elif pilihan == '2':
            hapus_film()
        elif pilihan == '3':
            edit_data_film()
        elif pilihan == '4':
            return
        else:
            print('Pilihan tidak valid.')

def tambah_film():
    try:
        with open(file_film, 'r', newline='') as file:
            reader = csv.DictReader(file)
            rows = list(reader)
    except FileNotFoundError:
        rows = []

    print(f"{'ID':<10} {'Judul':<30} {'Genre':<15} {'Durasi':<10} {'Harga':<10} {'Rating':<10}")
    print('-'*75)
    for row in rows:
        rating_display = row.get('Rating', '') or '-'
        print(f"{row['id_film']:<10} {row['Judul']:<30} {row['Genre']:<15} {row['Durasi (menit)']:<10} Rp{row['Harga']:<10} {rating_display:<10}")

    print('\nTekan Enter tanpa mengetik apa pun untuk kembali ke menu.')

    while True:
        id_film = input('ID Film: ').strip()
        if not id_film:
            print("Kembali ke menu...")
            return
        break

    while True:
        judul = input('Judul: ').strip()
        if not judul:
            print("Kembali ke menu...")
            return
        break

    while True:
        genre = input('Genre: ').strip()
        if not genre:
            print("Kembali ke menu...")
            return
        break

    while True:
        durasi = input('Durasi (dalam menit): ').strip()
        if not durasi:
            print("Kembali ke menu...")
            return
        if durasi.isdigit():
            break
        print('Durasi harus berupa angka.')

    while True:
        harga = input('Harga tiket: ').strip()
        if not harga:
            print("Kembali ke menu...")
            return
        if harga.isdigit():
            break
        print('Harga harus berupa angka.')

    with open(file_film, 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([id_film, judul, genre, durasi, harga])
    print('Film berhasil ditambahkan.')

def hapus_film():
    try:
        with open(file_film, 'r', newline='') as file:
            reader = csv.DictReader(file)
            rows = list(reader)
    except FileNotFoundError:
        rows = []

    if not rows:
        print("Belum ada data film.")
        return

    print(f"{'ID':<10} {'Judul':<30} {'Genre':<15} {'Durasi':<10} {'Harga':<10}")
    print('-'*75)
    for row in rows:
        print(f"{row['id_film']:<10} {row['Judul']:<30} {row['Genre']:<15} {row['Durasi (menit)']:<10} Rp{row['Harga']:<10}")

    print("\nTekan Enter tanpa mengetik apa pun untuk kembali.")
    id_film = input('Masukkan ID Film yang ingin dihapus: ').strip()
    if not id_film:
        print("Kembali ke menu...")
        return

    rows = []
    found = False
    film_dihapus = None

    with open(file_film, 'r', newline='') as file:
        reader = csv.reader(file)
        rows = list(reader)

    for row in rows:
        if row[0] == id_film:
            found = True
            film_dihapus = row
            break

    if not found:
        print('ID film tidak ditemukan.')
        return

    print('\n=== Detail Film ===')
    print(f'ID     : {film_dihapus[0]}')
    print(f'Judul  : {film_dihapus[1]}')
    print(f'Genre  : {film_dihapus[2]}')
    print(f'Durasi : {film_dihapus[3]} menit')
    print(f'Harga  : Rp{film_dihapus[4]}')

    konfirmasi = input('\nYakin ingin menghapus data film ini? (y/n): ').lower()
    if konfirmasi != 'y':
        print('Penghapusan dibatalkan. Kembali ke menu Manajemen Film.')
        return

    with open(file_film, 'w', newline='') as file:
        writer = csv.writer(file)
        for row in rows:
            if row[0] != id_film:
                writer.writerow(row)

    print('Film berhasil dihapus.')

def edit_data_film():
    try:
        with open(file_film, 'r', newline='') as file:
            reader = csv.DictReader(file)
            rows = list(reader)
    except FileNotFoundError:
        rows = []

    if not rows:
        print("Belum ada data film.")
        return

    print(f"{'ID':<10} {'Judul':<30} {'Genre':<15} {'Durasi':<10} {'Harga':<10}")
    print('-'*75)
    for row in rows:
        print(f"{row['id_film']:<10} {row['Judul']:<30} {row['Genre']:<15} {row['Durasi (menit)']:<10} Rp{row['Harga']:<10}")

    print("\nTekan Enter tanpa mengetik apa pun untuk kembali.")
    id_film = input('Masukkan ID Film yang ingin diedit: ').strip()
    if not id_film:
        print("Kembali ke menu...")
        return

    rows = []
    found = False
    with open(file_film, 'r', newline='') as file:
        reader = csv.reader(file)
        rows = list(reader)

    for i, row in enumerate(rows):
        if row[0] == id_film:
            found = True
            while True:
                print('\n=== Edit Data Film ===')
                print(f'Judul: {row[1]}')
                print(f'Genre: {row[2]}')
                print(f'Durasi: {row[3]}')
                print(f'Harga: {row[4]}')
                print('1. Edit Judul')
                print('2. Edit Genre')
                print('3. Edit Durasi')
                print('4. Edit Harga')
                print('5. Kembali')
                edit_pilihan = input('Pilih data yang ingin diedit: ')

                if edit_pilihan == '1':
                    new_judul = input('Masukkan Judul baru: ').strip()
                    if new_judul:
                        row[1] = new_judul
                elif edit_pilihan == '2':
                    new_genre = input('Masukkan Genre baru: ').strip()
                    if new_genre:
                        row[2] = new_genre
                elif edit_pilihan == '3':
                    while True:
                        new_durasi = input('Masukkan Durasi baru (dalam menit): ').strip()
                        if new_durasi == '':
                            break
                        elif new_durasi.isdigit():
                            row[3] = new_durasi
                            break
                        print('Durasi harus berupa angka.')
                elif edit_pilihan == '4':
                    while True:
                        new_harga = input('Masukkan Harga tiket baru: ').strip()
                        if new_harga == '':
                            break
                        elif new_harga.isdigit():
                            row[4] = new_harga
                            break
                        print('Harga harus berupa angka.')
                elif edit_pilihan == '5':
                    break
                else:
                    print('Pilihan tidak valid.')
            rows[i] = row
            break

    if not found:
        print('ID film tidak ditemukan.')
    else:
        with open(file_film, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerows(rows)
        print('Data film berhasil diperbarui.')

def muat_data_film():
    if not os.path.exists(file_film):
        return []
    daftar_film = []
    with open(file_film, mode="r", newline="" ) as file:
        reader = csv.DictReader(file)
        for baris in reader:
            try:
                daftar_film.append({
                    "id_film": baris.get("id_film", ""),
                    "nama_film": baris.get("Judul", ""),
                    "durasi": int(baris.get("Durasi (menit)", 0)),
                })
            except ValueError:
                continue
    return daftar_film


def manajemen_jadwal():
    while True:
        clear_terminal()
        header()
        print("\n=== MANAJEMEN JADWAL TAYANG ===")
        print("1. Buat Jadwal")
        print("2. Lihat Jadwal")
        print("3. Edit Jadwal")
        print("4. Hapus Jadwal")
        print("5. Rekomendasi Jadwal")
        print("6. Lihat Kursi per Jadwal")
        print("7. Kembali")

        pilihan = input("Pilih menu: ")
        if pilihan == "1":
            tambah_jadwal()
        elif pilihan == "2":
            lihat_jadwal()
        elif pilihan == "3":
            edit_jadwal()
        elif pilihan == "4":
            hapus_jadwal()
        elif pilihan == "5":
            rekomendasi_jadwal_tayang()
        elif pilihan == "6":
            pilih_dan_tampilkan_kursi()
        elif pilihan == "7":
            break
        else:
            print("Pilihan tidak valid.")
            input("Tekan Enter untuk ulang...")

def muat_jadwal():
    if not os.path.exists(file_jadwal):
        return []
    daftar_jadwal = []
    with open(file_jadwal, mode="r", newline="") as file:
        reader = csv.DictReader(file)
        for baris in reader:
            try:
                durasi = int(baris.get('durasi', 0))
                daftar_jadwal.append({
                    "id_jadwal": baris.get("id_jadwal", ""),
                    "id_film": baris.get("id_film", ""),
                    "durasi": durasi,
                    "jam_mulai": baris.get("jam_mulai", ""),
                    "jam_selesai": baris.get("jam_selesai", ""),
                    "id_studio": baris.get("id_studio", "")
                })
            except:
                continue
    return daftar_jadwal

def simpan_jadwal(daftar_jadwal):
    with open(file_jadwal, mode="w", newline="") as file:
        penulis = csv.DictWriter(file, fieldnames=["id_jadwal", "id_film", "durasi", "jam_mulai", "jam_selesai", "id_studio"])
        penulis.writeheader()
        penulis.writerows(daftar_jadwal)


def tambah_jadwal():
    clear_terminal()
    header()

    daftar_film = muat_data_film()
    if not daftar_film:
        print("Belum ada data film.")
        input("Tekan Enter untuk kembali...")
        return

    if not os.path.exists(file_studio):
        print("Belum ada data studio.")
        input("Tekan Enter untuk kembali...")
        return

    with open(file_studio, mode='r', newline='') as file:
        daftar_studio = list(csv.DictReader(file))

    if not daftar_studio:
        print("Belum ada data studio.")
        input("Tekan Enter untuk kembali...")
        return

    print("\n=== Daftar Film ===")
    for film in daftar_film:
        print(f"{film['id_film']} - {film['nama_film']} ({film['durasi']} menit)")

    print("\n=== Daftar Studio ===")
    for studio in daftar_studio:
        print(f"{studio['id_studio']} - {studio['nama_studio']} (kapasitas: {studio['kapasitas']})")

    id_film = input("Masukkan ID Film: ")
    film = next((f for f in daftar_film if f["id_film"] == id_film), None)
    if not film:
        print("ID Film tidak ditemukan.")
        input("Tekan Enter untuk kembali...")
        return

    id_studio = input("Masukkan ID Studio: ")
    studio = next((s for s in daftar_studio if s["id_studio"] == id_studio), None)
    if not studio:
        print("ID Studio tidak ditemukan.")
        input("Tekan Enter untuk kembali...")
        return

    kapasitas = int(studio["kapasitas"])

    # Buat ID jadwal unik
    semua_jadwal = muat_jadwal()
    next_id = len(semua_jadwal) + 1
    id_jadwal = f"J{next_id:03}"

    # Hitung jam mulai dan selesai otomatis
    jam_mulai = datetime.strptime("10:00", "%H:%M")
    for jadwal in semua_jadwal:
        if jadwal["id_studio"] == id_studio:
            jam_selesai = datetime.strptime(jadwal["jam_selesai"], "%H:%M")
            if jam_selesai > jam_mulai:
                jam_mulai = jam_selesai

    durasi = int(film["durasi"])
    jam_selesai = jam_mulai + timedelta(minutes=durasi)

    jam_mulai_fmt = jam_mulai.strftime("%H:%M")
    jam_selesai_fmt = jam_selesai.strftime("%H:%M")

    # Tambahkan jadwal ke list
    semua_jadwal.append({
        "id_jadwal": id_jadwal,
        "id_film": film["id_film"],
        "durasi": durasi,
        "jam_mulai": jam_mulai_fmt,
        "jam_selesai": jam_selesai_fmt,
        "id_studio": id_studio
    })

    # Simpan jadwal
    simpan_jadwal(semua_jadwal)

    # Buat file kursi berdasarkan kapasitas studio
    buat_file_kursi(id_jadwal, kapasitas)

    print(f"Jadwal berhasil ditambahkan dengan ID {id_jadwal}.")
    print(f"File kursi_{id_jadwal}.csv berhasil dibuat dengan {kapasitas} kursi.")
    input("Tekan Enter untuk kembali...")


def buat_file_kursi(id_jadwal, kapasitas):
    file_kursi = f"kursi_{id_jadwal}.csv"
    with open(file_kursi, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=['no_kursi', 'status'])
        writer.writeheader()
        for i in range(1, int(kapasitas) + 1):
            writer.writerow({'no_kursi': f"K{i}", 'status': 'kosong'})

def lihat_jadwal():
    clear_terminal()
    header()

    daftar_jadwal = muat_jadwal()
    if not daftar_jadwal:
        print("Jadwal tayang belum tersedia.")
        input("Tekan Enter untuk kembali...")
        return

    if not os.path.exists(file_studio):
        print("Data studio tidak ditemukan.")
        input("Tekan Enter untuk kembali...")
        return

    with open(file_studio, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        studio_dict = {row['id_studio']: row['nama_studio'] for row in reader}

    daftar_film = muat_data_film()
    film_dict = {film['id_film']: film['nama_film'] for film in daftar_film}  # Disesuaikan dengan header CSV kamu

    print("\n=== Jadwal Tayang Film ===\n")

    for jadwal in daftar_jadwal:
        nama_studio = studio_dict.get(jadwal['id_studio'], "Studio tidak diketahui")
        nama_film = film_dict.get(jadwal['id_film'], "Film tidak diketahui")
        durasi = jadwal.get('durasi', '-')
        jam_mulai = jadwal.get('jam_mulai', '-')
        jam_selesai = jadwal.get('jam_selesai', '-')

        print("+" + "-"*50 + "+")
        print(f"| Judul      : {nama_film:<34} |")
        print(f"| Durasi     : {durasi:<28} menit |")
        print(f"| Jam Mulai  : {jam_mulai:<34} |")
        print(f"| Jam Selesai: {jam_selesai:<34} |")
        print(f"| Studio     : {nama_studio:<34} |")
        print("+" + "-"*50 + "+")

    input("\nTekan Enter untuk kembali...")

def hapus_jadwal():
    daftar_jadwal = muat_jadwal()
    if not daftar_jadwal:
        print("Jadwal tayang belum tersedia.")
        input("Tekan Enter untuk kembali...")
        return

    print("\n=== Hapus Jadwal ===")
    for i, jadwal in enumerate(daftar_jadwal, start=1):
        print(f"{i}. ID Jadwal: {jadwal['id_jadwal']} | Film ID: {jadwal['id_film']} | Jam Mulai: {jadwal['jam_mulai']} | Studio: {jadwal['id_studio']}")

    try:
        pilihan = int(input("Pilih nomor jadwal yang ingin dihapus: "))
        if 1 <= pilihan <= len(daftar_jadwal):
            jadwal_terhapus = daftar_jadwal.pop(pilihan - 1)

            # Ambil ID jadwal untuk menghapus file kursi
            id_jadwal = jadwal_terhapus.get("id_jadwal", "")
            file_kursi = f"kursi_{id_jadwal}.csv"

            # Hapus file kursi jika ada
            if os.path.exists(file_kursi):
                os.remove(file_kursi)
                print(f"File {file_kursi} berhasil dihapus.")
            else:
                print(f"File {file_kursi} tidak ditemukan.")

            # Simpan kembali jadwal yang tersisa
            simpan_jadwal(daftar_jadwal)
            print("Jadwal berhasil dihapus.")
        else:
            print("Pilihan tidak valid.")
    except ValueError:
        print("Input tidak valid.")
    input("Tekan Enter untuk kembali...")


def edit_jadwal():
    daftar_jadwal = muat_jadwal()
    daftar_film = muat_data_film()

    if not daftar_jadwal:
        print("Jadwal tayang belum tersedia.")
        input("Tekan Enter untuk kembali...")
        return
    if not daftar_film:
        print("Data film tidak tersedia.")
        input("Tekan Enter untuk kembali...")
        return

    print("\n=== Edit Jadwal ===")
    for i, jadwal in enumerate(daftar_jadwal, start=1):
        print(f"{i}. Film ID: {jadwal['id_film']} | Jam Mulai: {jadwal['jam_mulai']} | Studio: {jadwal['id_studio']}")

    try:
        pilihan = int(input("Pilih nomor jadwal yang ingin diedit: "))
        if 1 <= pilihan <= len(daftar_jadwal):
            jadwal_edit = daftar_jadwal[pilihan - 1]

            print("\nDaftar Film:")
            for film in daftar_film:
                print(f"{film['id_film']} - {film['nama_film']} ({film['durasi']} menit)")
            id_film_baru = input("Masukkan ID Film baru (kosongkan jika tidak ingin ganti): ")
            if id_film_baru:
                film_baru = next((f for f in daftar_film if f["id_film"] == id_film_baru), None)
                if not film_baru:
                    print("ID Film tidak ditemukan.")
                    input("Tekan Enter untuk kembali...")
                    return
                jadwal_edit["id_film"] = film_baru["id_film"]
                jadwal_edit["durasi"] = int(film_baru["durasi"])

            jam_mulai_input = input("Masukkan jam mulai baru (HH:MM) (kosongkan jika tidak ingin ganti): ")
            if jam_mulai_input:
                try:
                    jam_mulai = datetime.strptime(jam_mulai_input, "%H:%M")
                    jam_selesai = jam_mulai + timedelta(minutes=jadwal_edit["durasi"])
                    jadwal_edit["jam_mulai"] = jam_mulai.strftime("%H:%M")
                    jadwal_edit["jam_selesai"] = jam_selesai.strftime("%H:%M")
                except ValueError:
                    print("Format jam tidak valid.")
                    input("Tekan Enter untuk kembali...")
                    return

            simpan_jadwal(daftar_jadwal)
            print("Jadwal berhasil diedit.")
        else:
            print("Pilihan tidak valid.")
    except ValueError:
        print("Input tidak valid.")
    input("Tekan Enter untuk kembali...")

def rekomendasi_jadwal_tayang():
    print("=== Rekomendasi Jadwal Tayang ===")

    try:
        kapasitas = int(input("Masukkan total waktu yang tersedia (dalam menit): "))
        if kapasitas <= 0:
            print("Durasi harus lebih dari 0.")
            return
    except ValueError:
        print("Input tidak valid.")
        return

    if not os.path.exists(file_film):
        print("Data film tidak ditemukan.")
        return

    with open(file_film, 'r') as file:
        reader = csv.DictReader(file)
        film_list = [row for row in reader if row.get("Rating") and row.get("Durasi (menit)")]

    durasi = []
    nilai = []
    data_film = []

    for film in film_list:
        try:
            d = int(film['Durasi (menit)'])
            r = float(film['Rating'])
            if d <= kapasitas:
                v = r * d
                durasi.append(d)
                nilai.append(v)
                data_film.append(film)
        except ValueError:
            continue

    if not durasi:
        print("Tidak ada film yang durasinya sesuai dengan waktu yang tersedia.")
        return

    n = len(durasi)
    dp = [0] * (kapasitas + 1)
    pilihan = [-1] * (kapasitas + 1)

    for i in range(kapasitas + 1):
        for j in range(n):
            if durasi[j] <= i:
                if dp[i - durasi[j]] + nilai[j] > dp[i]:
                    dp[i] = dp[i - durasi[j]] + nilai[j]
                    pilihan[i] = j

    waktu = kapasitas
    hasil = {}

    while waktu > 0 and pilihan[waktu] != -1:
        idx = pilihan[waktu]
        film = data_film[idx]
        judul = film.get('Judul', '').strip()
        hasil[judul] = hasil.get(judul, 0) + 1
        waktu -= durasi[idx]

    if not hasil:
        print("Tidak ada kombinasi film yang cocok dengan durasi tersebut.")
        return

    print("\nRekomendasi Film:")
    total_durasi = 0
    total_rating = 0
    for judul, jumlah in hasil.items():
        film = next(f for f in data_film if f['Judul'] == judul)
        d = int(film['Durasi (menit)'])
        r = float(film['Rating'])
        print(f"{judul} x{jumlah} - Durasi: {d} menit, Rating: {r}")
        total_durasi += d * jumlah
        total_rating += r * jumlah

    print(f"\nTotal Waktu: {total_durasi} menit")
    print(f"Total Perkiraan Rating Tertimbang: {total_rating:.2f}")
    input("\nTekan Enter untuk kembali...")

def pilih_dan_tampilkan_kursi():
    clear_terminal()
    header()

    daftar_jadwal = muat_jadwal()
    if not daftar_jadwal:
        print("Belum ada jadwal tayang.")
        input("Tekan Enter untuk kembali...")
        return

    print("\n=== Pilih Jadwal untuk Melihat Kursi ===")
    for i, jadwal in enumerate(daftar_jadwal, start=1):
        print(f"{i}. ID Jadwal: {jadwal['id_jadwal']} | Film ID: {jadwal['id_film']} | Jam: {jadwal['jam_mulai']} - {jadwal['jam_selesai']} | Studio: {jadwal['id_studio']}")

    try:
        pilihan = int(input("Pilih nomor jadwal: "))
        if 1 <= pilihan <= len(daftar_jadwal):
            id_jadwal = daftar_jadwal[pilihan - 1]["id_jadwal"]
            tampilkan_kursi(id_jadwal)
        else:
            print("Pilihan tidak valid.")
            input("Tekan Enter untuk kembali...") 
    except ValueError:
        print("Input tidak valid.")
        input("Tekan Enter untuk kembali...")


def tampilkan_kursi(id_jadwal): 
    clear_terminal()
    header()
    print(f"=== TAMPILAN KURSI UNTUK JADWAL {id_jadwal} ===")

    file_kursi = f"kursi_{id_jadwal}.csv"
    if not os.path.exists(file_kursi):
        print(f"Data kursi untuk jadwal {id_jadwal} tidak ditemukan.")
        input("\nTekan Enter untuk kembali...")
        return

    with open(file_kursi, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        kursi_list = list(reader)

    if not kursi_list:
        print("Belum ada data kursi.")
        input("\nTekan Enter untuk kembali...")
        return

    jumlah_per_baris = 5
    for i, kursi in enumerate(kursi_list, start=1):
        status = kursi['status']
        simbol = '[X]' if status == 'terisi' else '[ ]'
        print(f"{simbol} {kursi['no_kursi']}", end='\t')
        if i % jumlah_per_baris == 0:
            print()
    print("\nKeterangan: [ ] = Kosong, [X] = Terisi\n")
    input("Tekan Enter untuk kembali...")


def manajemen_studio():
    clear_terminal()
    header()
    while True:
        print('\n=== MANAJEMEN STUDIO ===')
        print('1. Tambah Studio Baru')
        print('2. Hapus Studio')
        print('3. Kembali')

        pilihan = input('Pilih menu: ')
        if pilihan == '1':
            tambah_studio()
        elif pilihan == '2':
            hapus_studio()
        elif pilihan == '3':
            return
        else:
            print('Pilihan tidak valid.\n')

def tambah_studio():
    clear_terminal()
    header()
    print("=== DAFTAR STUDIO ===")
    with open(file_studio, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        studios = list(reader)
        if not studios:
            print("Belum ada data studio.")
        else:
            for studio in studios:
                print(f"ID Studio: {studio['id_studio']}, Nama: {studio['nama_studio']}, Kapasitas: {studio['kapasitas']}")
    
    print("=== TAMBAH STUDIO BARU ===")
    id_studio = input("Masukkan ID Studio (Enter untuk kembali): ").strip()
    if not id_studio:
        print("Dibatalkan. Tekan Enter untuk kembali...")
        input()
        return

    nama_studio = input("Masukkan Nama Studio (Enter untuk kembali): ").strip()
    if not nama_studio:
        print("Dibatalkan. Tekan Enter untuk kembali...")
        input()
        return

    kapasitas = input("Masukkan Kapasitas Kursi (Enter untuk kembali): ").strip()
    if not kapasitas:
        print("Dibatalkan. Tekan Enter untuk kembali...")
        input()
        return

    if not kapasitas.isdigit():
        print("Kapasitas harus berupa angka.\n")
        input("Tekan Enter untuk mengulang...")
        return tambah_studio()

    if os.path.exists(file_studio):
        with open(file_studio, mode='r', newline='') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['id_studio'] == id_studio:
                    print("ID Studio sudah ada. Gunakan ID yang lain.\n")
                    input("Tekan Enter untuk mengulang...")
                    return tambah_studio()

    with open(file_studio, mode='a', newline='') as file:
        fieldnames = ['id_studio', 'nama_studio', 'kapasitas']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writerow({'id_studio': id_studio, 'nama_studio': nama_studio, 'kapasitas': kapasitas})
    

    print("Studio berhasil ditambahkan.")
    input("Tekan Enter untuk kembali...")

def hapus_studio():
    clear_terminal()
    header()
    print("=== HAPUS STUDIO ===")
    id_studio = input("Masukkan ID Studio yang ingin dihapus (Enter untuk kembali): ").strip()
    
    if not id_studio:
        print("Dibatalkan. Tekan Enter untuk kembali...")
        input()
        return

    if not os.path.exists(file_studio):
        print("Data studio belum tersedia.")
        input("Tekan Enter untuk kembali...")
        return

    data_baru = []
    ditemukan = False
    with open(file_studio, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            if row['id_studio'] != id_studio:
                data_baru.append(row)
            else:
                ditemukan = True

    if ditemukan:
        with open(file_studio, mode='w', newline='') as file:
            fieldnames = ['id_studio', 'nama_studio', 'kapasitas']
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data_baru)

        print("Studio berhasil dihapus.")
    else:
        print("ID Studio tidak ditemukan.")

    input("Tekan Enter untuk kembali...")

def riwayat_transaksi():
    clear_terminal()
    header()
    print("\n=== RIWAYAT TRANSAKSI PEMESANAN ===")
    
    if not os.path.exists(file_riwayat):
        print("Belum ada transaksi yang tercatat.")
        input("\nTekan Enter untuk kembali...")
        return

    with open(file_riwayat, mode='r', newline='' ) as file:
        reader = csv.DictReader(file)
        data = list(reader)

        if not data:
            print("Belum ada transaksi yang tercatat.")
        else:
            for i, row in enumerate(data, start=1):
                print(f"\nTransaksi {i}")
                print(f"  Username      : {row.get('username', '-')}")
                print(f"  Judul Film    : {row.get('judul_film', '-')}")
                print(f"  Studio        : {row.get('studio', '-')}")
                print(f"  Jadwal        : {row.get('jadwal', '-')}")
                print(f"  Jumlah Tiket  : {row.get('jumlah_tiket', '-')}")
                print(f"  Total Bayar   : Rp{row.get('total_harga', '-')}")
                print(f"  Waktu Pesan   : {row.get('waktu_pesan', '-')}")
    
    input("\nTekan Enter untuk kembali ke menu...")

#PENGGUNA----------------------------------------------------------------------------------------------------------------------
def menu_pengguna(username):
    clear_terminal()
    while True:
        print('\n=== MENU PENGGUNA ===')
        print('1. Beli Tiket')
        print('2. Riwayat Pemesanan')
        print('3. Beri Rating Film')
        print('4. Logout')

        pilihan = input('Pilih menu: ')
        if pilihan == '1':
            beli_tiket(username)
        elif pilihan == '2':
            lihat_riwayat_transaksi(username)
        elif pilihan == '3':
            beri_rating_film(username)
        elif pilihan == '4':
            clear_terminal()
            return main()
        else:
            print('Pilihan tidak valid. Silakan pilih lagi.')

def pilih_kursi(id_jadwal):
    while True:
        tampilkan_kursi(id_jadwal)
        print("=== PILIH KURSI ===")
        nomor_kursi = input("Masukkan nomor kursi yang ingin dipilih (pisahkan dengan koma jika lebih dari satu, atau 0 untuk batal): ")

        if nomor_kursi == '0':
            return None

        kursi_dipilih = [k.strip().upper() for k in nomor_kursi.split(',')]
        file_kursi = f"kursi_{id_jadwal}.csv"

        with open(file_kursi, mode='r', newline='') as file:
            reader = csv.DictReader(file)
            kursi_list = list(reader)

        kursi_tersedia = []
        kursi_tidak_valid = []
        kursi_sudah_terisi = []

        for nomor in kursi_dipilih:
            kursi = next((k for k in kursi_list if k['no_kursi'] == nomor), None)
            if not kursi:
                kursi_tidak_valid.append(nomor)
            elif kursi['status'] == 'terisi':
                kursi_sudah_terisi.append(nomor)
            else:
                kursi_tersedia.append(kursi)

        if kursi_tidak_valid:
            print(f"Kursi {', '.join(kursi_tidak_valid)} tidak valid.")
        if kursi_sudah_terisi:
            print(f"Kursi {', '.join(kursi_sudah_terisi)} sudah terisi.")

        if kursi_tidak_valid or kursi_sudah_terisi:
            input("Tekan Enter untuk mencoba lagi...")
            continue

        if not kursi_tersedia:
            print("Tidak ada kursi yang dipilih.")
            input("Tekan Enter untuk mencoba lagi...")
            continue

        return kursi_tersedia


def update_status_kursi(id_jadwal, no_kursi, status):
    file_kursi = f"kursi_{id_jadwal}.csv"

    if not os.path.exists(file_kursi):
        print("File kursi tidak ditemukan.")
        return

    with open(file_kursi, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        kursi_list = list(reader)

    for kursi in kursi_list:
        if kursi['no_kursi'] == no_kursi:
            kursi['status'] = status
            break

    with open(file_kursi, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=['no_kursi', 'status'])
        writer.writeheader()
        writer.writerows(kursi_list)

def beli_tiket(username):
    while True:
        clear_terminal()
        print("=== BELI TIKET ===")
        print("1. Cari Film")
        print("2. Tampilkan Semua Film")
        print("3. Tampilkan Jadwal Terdekat dan Termurah")
        print("4. Kembali ke Menu")

        pilihan = input("Pilih opsi: ")

        if pilihan == '1':
            film_terpilih = cari_dan_pilih_film()
            if film_terpilih:
                proses_pembelian(username, film_terpilih)
                break  
        elif pilihan == '2':
            film_terpilih = tampilkan_dan_pilih_film()
            if film_terpilih:
                proses_pembelian(username, film_terpilih)
                break
        elif pilihan == '3':
            film_terpilih, jadwal_terpilih = tampilkan_jadwal_terdekat_termurah()
        if film_terpilih and jadwal_terpilih:
                proses_pembelian_dengan_jadwal(username, film_terpilih, jadwal_terpilih)

                break
        elif pilihan == '4':
            return 
        else:
            print("Pilihan tidak valid. Silakan coba lagi.")
            input("Tekan Enter untuk melanjutkan...")

def cari_dan_pilih_film():
    clear_terminal()
    print("=== CARI FILM ===")
    keyword = input("Masukkan judul atau genre film: ").lower()
    film_list = []

    if not os.path.exists(file_film):
        print("Data film tidak ditemukan.")
        input("Tekan Enter untuk kembali...")
        return

    with open(file_film, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            if keyword in row["Judul"].lower() or keyword in row["Genre"].lower():
                film_list.append(row)

    if not film_list:
        print("Film tidak ditemukan.")
        input("Tekan Enter untuk kembali...")
        return

    print("\nHasil pencarian:")
    for idx, film in enumerate(film_list, start=1):
        print(f"{idx}. {film['Judul']} | Genre: {film['Genre']} | Durasi: {film['Durasi (menit)']} menit | Harga: {film['Hargat']}")

    pilihan = input("Pilih nomor film untuk beli (atau 0 untuk batal): ")
    if pilihan.isdigit():
        pilihan = int(pilihan)
        if pilihan == 0:
            return
        elif 1 <= pilihan <= len(film_list):
            return film_list[pilihan - 1]

    print("Pilihan tidak valid.")
    input("Tekan Enter untuk kembali...")

def tampilkan_dan_pilih_film():
    clear_terminal()
    print("=== DAFTAR FILM ===")
    film_list = []

    if not os.path.exists(file_film):
        print("Data film tidak ditemukan.")
        input("Tekan Enter untuk kembali...")
        return

    with open(file_film, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            film_list.append(row)

    if not film_list:
        print("Belum ada film tersedia.")
        input("Tekan Enter untuk kembali...")
        return

    for idx, film in enumerate(film_list, start=1):
        print(f"{idx}. {film['Judul']} | Genre: {film['Genre']} | Durasi: {film['Durasi (menit)']} menit | Harga: {film['Harga']}")

    pilihan = input("Pilih nomor film untuk beli (atau 0 untuk batal): ")
    if pilihan.isdigit():
        pilihan = int(pilihan)
        if pilihan == 0:
            return
        elif 1 <= pilihan <= len(film_list):
            return film_list[pilihan - 1]

    print("Pilihan tidak valid.")
    input("Tekan Enter untuk kembali...")

def tampilkan_jadwal_terdekat_termurah():
    clear_terminal()
    header()
    print("=== JADWAL TERDEKAT & TERMURAH ===")

    waktu_input = input("Masukkan waktu sekarang (HH:MM): ").strip()
    try:
        waktu_user = datetime.strptime(waktu_input, "%H:%M")
    except ValueError:
        print("Format waktu tidak valid. Gunakan format HH:MM.")
        input("Tekan Enter untuk kembali...")
        return None, None

    daftar_jadwal = muat_jadwal()
    daftar_film = []
    if os.path.exists(file_film):
        with open(file_film, 'r', newline='') as file:
            daftar_film = list(csv.DictReader(file))

    film_dict = {f['id_film']: f for f in daftar_film}

    data_jadwal = []
    for jadwal in daftar_jadwal:
        try:
            jam_mulai = datetime.strptime(jadwal['jam_mulai'], "%H:%M")
            id_film = jadwal['id_film']
            harga = int(film_dict.get(id_film, {}).get('Harga', 999999))
            selisih_menit = (jam_mulai - waktu_user).total_seconds() / 60
            if selisih_menit >= 0:
                data_jadwal.append({
                    'id_film': id_film,
                    'judul': film_dict.get(id_film, {}).get('Judul', 'Tidak diketahui'),
                    'jam_mulai': jadwal['jam_mulai'],
                    'jam_selesai': jadwal['jam_selesai'],
                    'id_studio': jadwal['id_studio'],
                    'harga': harga,
                    'selisih': selisih_menit
                })
        except:
            continue

    # Insertion sort
    for i in range(1, len(data_jadwal)):
        key = data_jadwal[i]
        j = i - 1
        while j >= 0 and (
            (data_jadwal[j]['selisih'] > key['selisih']) or
            (data_jadwal[j]['selisih'] == key['selisih'] and data_jadwal[j]['harga'] > key['harga'])
        ):
            data_jadwal[j + 1] = data_jadwal[j]
            j -= 1
        data_jadwal[j + 1] = key

    if not data_jadwal:
        print("Tidak ada jadwal yang cocok dengan waktu saat ini.")
        input("\nTekan Enter untuk kembali...")
        return None, None

    print("\nJadwal tayang terdekat dan termurah:")
    for idx, jadwal in enumerate(data_jadwal, start=1):
        print(f"{idx}.")
        print(f"Judul   : {jadwal['judul']}")
        print(f"Jadwal  : {jadwal['jam_mulai']} - {jadwal['jam_selesai']}")
        print(f"Studio  : {jadwal['id_studio']}")
        print(f"Harga   : Rp{jadwal['harga']}")
        print()

    pilihan = input("Pilih nomor film untuk beli (atau 0 untuk batal): ").strip()
    if not pilihan.isdigit():
        print("Input tidak valid.")
        return None, None

    pilihan = int(pilihan)
    if pilihan == 0 or not (1 <= pilihan <= len(data_jadwal)):
        return None, None

    film_terpilih = film_dict.get(data_jadwal[pilihan - 1]['id_film'])
    jadwal_terpilih = data_jadwal[pilihan - 1]

    return film_terpilih, jadwal_terpilih


def proses_pembelian(username, film_terpilih):
    clear_terminal()
    print(f"=== PEMBELIAN TIKET: {film_terpilih['Judul']} ===")
    
    daftar_jadwal = muat_jadwal()
    jadwal_film = [j for j in daftar_jadwal if j['id_film'] == film_terpilih['id_film']]
    
    if not jadwal_film:
        print("Tidak ada jadwal tersedia untuk film ini.")
        input("Tekan Enter untuk kembali...")
        return
    
    print("\nJadwal yang tersedia:")
    for idx, jadwal in enumerate(jadwal_film, start=1):
        print(f"{idx}. {jadwal['jam_mulai']} - {jadwal['jam_selesai']} | Studio: {jadwal['id_studio']}")
    
    pilihan_jadwal = input("Pilih nomor jadwal (atau 0 untuk batal): ")
    if not pilihan_jadwal.isdigit() or int(pilihan_jadwal) == 0:
        return
    
    pilihan_jadwal = int(pilihan_jadwal)
    if not (1 <= pilihan_jadwal <= len(jadwal_film)):
        print("Pilihan tidak valid.")
        input("Tekan Enter untuk kembali...")
        return
    
    jadwal_dipilih = jadwal_film[pilihan_jadwal - 1]
    id_jadwal = jadwal_dipilih['id_jadwal']
    id_studio = jadwal_dipilih['id_studio']

    kursi_terpilih = pilih_kursi(id_jadwal)  # PERBAIKAN DI SINI
    if not kursi_terpilih:
        print("Pembelian dibatalkan.")
        input("Tekan Enter untuk kembali...")
        return

    while True:
        try:
            jumlah_tiket = int(input("Masukkan jumlah tiket: "))
            if jumlah_tiket <= 0:
                print("Jumlah tiket harus lebih dari 0.")
                continue
            if jumlah_tiket > len(kursi_terpilih):
                print(f"Anda hanya memilih {len(kursi_terpilih)} kursi. Pilih jumlah tiket sesuai atau kurang dari jumlah kursi.")
                continue
            break
        except ValueError:
            print("Input harus berupa angka.")
    
    harga_tiket = int(film_terpilih['Harga'])
    total_harga = jumlah_tiket * harga_tiket

    print(f"\n=== KONFIRMASI PEMBELIAN ===")
    print(f"Film: {film_terpilih['Judul']}")
    print(f"Jadwal: {jadwal_dipilih['jam_mulai']} - {jadwal_dipilih['jam_selesai']}")
    print(f"Studio: {id_studio}")
    print(f"Jumlah tiket: {jumlah_tiket}")
    print(f"Harga per tiket: Rp{harga_tiket}")
    print(f"Total harga: Rp{total_harga}")
    print(f"Kursi dipilih: {', '.join([k['no_kursi'] for k in kursi_terpilih[:jumlah_tiket]])}")
    
    konfirmasi = input("\nKonfirmasi pembelian? (y/n): ").lower()
    if konfirmasi == 'y':
        for kursi in kursi_terpilih[:jumlah_tiket]:
            update_status_kursi(id_jadwal, kursi['no_kursi'], 'terisi')  # PERBAIKAN DI SINI

        simpan_riwayat_transaksi(
            username, 
            film_terpilih['Judul'], 
            jadwal_dipilih['jam_mulai'], 
            jadwal_dipilih['jam_selesai'], 
            jumlah_tiket, 
            harga_tiket
        )
        print("\nTiket berhasil dibeli!")
        print("Terima kasih atas pembelian Anda.")
    else:
        print("Pembelian dibatalkan.")
    
    input("Tekan Enter untuk kembali...")


def proses_pembelian_dengan_jadwal(username, film_terpilih, jadwal_dipilih):
    clear_terminal()
    print(f"=== PEMBELIAN TIKET: {film_terpilih['Judul']} ===")

    id_jadwal = jadwal_dipilih['id_jadwal']
    id_studio = jadwal_dipilih['id_studio']

    kursi_terpilih = pilih_kursi(id_jadwal)  # PERBAIKAN DI SINI
    if not kursi_terpilih:
        print("Pembelian dibatalkan.")
        input("Tekan Enter untuk kembali...")
        return

    while True:
        try:
            jumlah_tiket = int(input("Masukkan jumlah tiket: "))
            if jumlah_tiket <= 0:
                print("Jumlah tiket harus lebih dari 0.")
                continue
            if jumlah_tiket > len(kursi_terpilih):
                print(f"Anda hanya memilih {len(kursi_terpilih)} kursi. Pilih jumlah tiket sesuai.")
                continue
            break
        except ValueError:
            print("Input harus berupa angka.")

    harga_tiket = int(film_terpilih['Harga'])
    total_harga = jumlah_tiket * harga_tiket

    print(f"\n=== KONFIRMASI PEMBELIAN ===")
    print(f"Film: {film_terpilih['Judul']}")
    print(f"Jadwal: {jadwal_dipilih['jam_mulai']} - {jadwal_dipilih['jam_selesai']}")
    print(f"Studio: {id_studio}")
    print(f"Jumlah tiket: {jumlah_tiket}")
    print(f"Harga per tiket: Rp{harga_tiket}")
    print(f"Total harga: Rp{total_harga}")
    print(f"Kursi dipilih: {', '.join([k['no_kursi'] for k in kursi_terpilih[:jumlah_tiket]])}")

    konfirmasi = input("\nKonfirmasi pembelian? (y/n): ").lower()
    if konfirmasi == 'y':
        for kursi in kursi_terpilih[:jumlah_tiket]:
            update_status_kursi(id_jadwal, kursi['no_kursi'], 'terisi')  # PERBAIKAN DI SINI

        simpan_riwayat_transaksi(
            username,
            film_terpilih['Judul'],
            jadwal_dipilih['jam_mulai'],
            jadwal_dipilih['jam_selesai'],
            jumlah_tiket,
            harga_tiket
        )
        print("\nTiket berhasil dibeli! Terima kasih.")
    else:
        print("Pembelian dibatalkan.")

    input("Tekan Enter untuk kembali...")

def simpan_riwayat_transaksi(username, nama_film, jam_mulai, jam_selesai, jumlah_tiket, harga_tiket):
    total_harga = jumlah_tiket * harga_tiket
    waktu_pesan = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    file_exists = os.path.exists(file_riwayat)
    with open(file_riwayat, mode='a', newline='' ) as file:
        fieldnames = ['username', 'nama_film', 'jam_mulai', 'jam_selesai', 'jumlah_tiket', 'total_harga', 'waktu_pesan']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
        writer.writerow({
            'username': username,
            'nama_film': nama_film,
            'jam_mulai': jam_mulai,
            'jam_selesai': jam_selesai,
            'jumlah_tiket': jumlah_tiket,
            'total_harga': total_harga,
            'waktu_pesan': waktu_pesan
        })

def lihat_riwayat_transaksi(username):
    clear_terminal()
    if not os.path.exists(file_riwayat):
        print("Belum ada riwayat transaksi.")
        return

    print(f"\n=== Riwayat Transaksi: {username} ===")
    with open(file_riwayat, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        riwayat = [row for row in reader if row['username'] == username]

    if not riwayat:
        print("Tidak ada transaksi ditemukan.")
        return

    for i, row in enumerate(riwayat, start=1):
        print(f"{i}. {row['nama_film']} | {row['jam_mulai']} - {row['jam_selesai']} | "
              f"Jumlah: {row['jumlah_tiket']} | Total: Rp{row['total_harga']} | Waktu: {row['waktu_pesan']}")

def beri_rating_film(username):
    try:
        with open(file_film, 'r', newline='') as file:
            reader = csv.DictReader(file)
            film_list = list(reader)
    except FileNotFoundError:
        print("Data film tidak ditemukan.")
        return

    if not film_list:
        print("Belum ada film yang tersedia.")
        return

    print("\n=== DAFTAR FILM ===")
    for i, film in enumerate(film_list, 1):
        print(f"{i}. {film.get('judul', 'Tidak ada judul')}")

    try:
        pilihan = int(input("\nPilih nomor film yang ingin diberi rating: ")) - 1
        if pilihan < 0 or pilihan >= len(film_list):
            print("Pilihan tidak valid.")
            return
    except ValueError:
        print("Input tidak valid.")
        return

    try:
        rating_input = input("Masukkan rating (0-10): ").replace(",", ".")
        rating_baru = float(rating_input)
        if rating_baru < 0 or rating_baru > 10:
            print("Rating harus antara 0-10.")
            return
    except ValueError:
        print("Rating harus berupa angka.")
        return

    id_film = film_list[pilihan]['id_film']

    try:
        with open(file_rating, 'a', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=['id_film', 'rating', 'username'])
            if file.tell() == 0:
                writer.writeheader()
            writer.writerow({
                'id_film': id_film,
                'rating': rating_baru,
                'username': username
            })
            print("Rating berhasil disimpan ke rating.csv!")
            input("Tekan Enter untuk kembali...")
    except Exception as e:
        print(f"Gagal menyimpan rating: {e}")


inisialisasi_file()
main()
